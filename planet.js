// Generated by CoffeeScript 1.9.0
var Cloud, Planet, PlanetGlow, Ring,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  __hasProp = {}.hasOwnProperty;

Cloud = (function(_super) {
  __extends(Cloud, _super);

  function Cloud(radius) {
    this.mesh = THREEx.Planets.createEarthCloud();
    this.mesh.geometry = new THREE.SphereGeometry(radius + 0.1, 32, 32);
  }

  return Cloud;

})(BaseModel);

Ring = (function(_super) {
  __extends(Ring, _super);

  function Ring(radius) {
    this.mesh = THREEx.Planets.createSaturnRing();
    this.mesh.geometry = new THREEx.Planets._RingGeometry(1.55 * radius, 1.75 * radius, 64);
  }

  return Ring;

})(BaseModel);

PlanetGlow = (function(_super) {
  __extends(PlanetGlow, _super);

  function PlanetGlow(radius, glowColorS, mesh) {
    var geometry, glowColor, material;
    glowColor = new THREE.Color(glowColorS);
    geometry = new THREE.SphereGeometry(radius, 32, 32);
    geometry = mesh.geometry.clone();
    material = THREEx.createAtmosphereMaterial();
    material.uniforms.glowColor.value = glowColor;
    this.mesh = new THREE.Mesh(geometry, material);
    this.mesh.scale.multiplyScalar(1.05);
  }

  return PlanetGlow;

})(BaseModel);

Planet = (function(_super) {
  __extends(Planet, _super);

  function Planet(name, radius, distanceFromOrigin, img, glowColorS, speed) {
    var geometry, material, texture;
    this.mesh = new THREE.Object3D();
    geometry = new THREE.SphereGeometry(radius, 32, 32);
    texture = THREE.ImageUtils.loadTexture(THREEx.Planets.baseURL + ("images/" + img + ".jpg"));
    material = new THREE.MeshPhongMaterial({
      map: texture,
      bumpMap: texture,
      bumpScale: 0.05
    });
    this.planet = new THREE.Mesh(geometry, material);
    this.planet.position.x = distanceFromOrigin;
    this.mesh.add(this.planet);
    this.glow = new PlanetGlow(radius, glowColorS, this.planet);
    this.glow.setVisible(false);
    this.planet.add(this.glow.mesh);
    this.clouds = new Cloud(radius);
    this.clouds.setVisible(false);
    this.planet.add(this.clouds.mesh);
    this.ring = new Ring(radius);
    this.ring.setVisible(false);
    this.planet.add(this.ring.mesh);
    this.speed = speed;
  }

  Planet.prototype.setDateRotation = function(time) {
    return this.mesh.rotation.y = time * this.speed / 100;
  };

  Planet.prototype.animateClouds = function(tpf) {
    return this.clouds.mesh.rotation.y += 1 / 8 * tpf;
  };

  return Planet;

})(BaseModel);
