// Generated by CoffeeScript 1.9.0
var GravityWell, Level, LevelLoader, Player, Sprite, Tower, named_classes, points, turretSize,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  __hasProp = {}.hasOwnProperty;

points = [new Point(0, 0), new Point(128, 0), new Point(128, 30), new Point(0, 30)];

turretSize = [new Point(0, 0), new Point(10, 0), new Point(10, 10), new Point(0, 10)];

LevelLoader = (function() {
  function LevelLoader() {
    this.current = 0;
    this.levels = [];
  }

  LevelLoader.prototype.currentLevel = function() {
    return this.levels[this.current];
  };

  LevelLoader.prototype.setLevel = function(i) {
    return this.current = i;
  };

  LevelLoader.prototype.nextLevel = function() {
    return this.current++;
  };

  return LevelLoader;

})();

Level = (function() {
  function Level(json) {}

  return Level;

})();

Sprite = (function(_super) {
  __extends(Sprite, _super);

  function Sprite(points) {
    Sprite.__super__.constructor.call(this, points);
    this.skin = document.getElementById('player');
    this.time = 0;
    this.currentFrame = 0;
    this.totalFrames = 2;
    this.fps = 0.4;
  }

  Sprite.prototype.getAnimationFrame = function(tpf) {
    this.time += tpf;
    if (this.fps <= this.time) {
      this.time = 0;
      this.currentFrame++;
    }
    if (this.currentFrame >= this.totalFrames) {
      this.currentFrame = 0;
    }
    return this.skin;
  };

  return Sprite;

})(Polygon);

Player = (function(_super) {
  __extends(Player, _super);

  function Player() {
    Player.__super__.constructor.call(this, points);
    this.color = 'blue';
    this.speed = 100;
    this.defaultDirection = new Point(0, 0);
    this.direction = this.defaultDirection.clone();
    this.isAttracted = false;
    this.skin = document.getElementById('player');
  }

  Player.prototype.move = function(tpf) {
    if (!this.isAttracted) {
      this.direction = this.defaultDirection.clone();
    }
    this.position.x += this.direction.x * this.speed * tpf;
    return this.position.y += this.direction.y * this.speed * tpf;
  };

  Player.prototype.applyDirectionModifierFrom = function(tower) {
    return this.direction = tower.directionModifier;
  };

  Player.prototype.draw = function(context, tpf) {
    var offsetX, offsetY;
    this.getAnimationFrame(tpf);
    offsetX = 0;
    offsetY = 0;
    if (this.currentFrame === 1) {
      offsetX = 128;
      offsetY = 30;
    }
    return context.drawImage(this.skin, 0 + offsetX, 0, 128 + this.currentFrame, 30, this.getPolygonCenter().x - 128 / 2, this.getPolygonCenter().y - 15 / 2, 128, 30);
  };

  return Player;

})(Sprite);

Tower = (function(_super) {
  __extends(Tower, _super);

  function Tower() {
    return Tower.__super__.constructor.apply(this, arguments);
  }

  return Tower;

})(Sprite);

GravityWell = (function(_super) {
  __extends(GravityWell, _super);

  function GravityWell(position) {
    GravityWell.__super__.constructor.call(this, turretSize);
    this.color = 'red';
    this.attractDistance = 130;
    this.directionModifier = new Point(0, 1);
    this.position = position;
  }

  GravityWell.prototype.setDirectionModifier = function(directionModifier) {
    this.directionModifier = directionModifier;
    return this;
  };

  GravityWell.prototype.attracts = function(polygon) {
    return this.getPolygonCenter().distanceTo(polygon.getPolygonCenter()) < this.attractDistance;
  };

  return GravityWell;

})(Tower);

named_classes = {
  GravityWell: GravityWell
};
